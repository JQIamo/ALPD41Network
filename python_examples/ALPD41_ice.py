# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.8
#
# <auto-generated>
#
# Generated from file `ALPD41.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ALPD41Network
_M_ALPD41Network = Ice.openModule('ALPD41Network')
__name__ = 'ALPD41Network'

if '_t_ByteArr' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network._t_ByteArr = IcePy.defineSequence('::ALPD41Network::ByteArr', (), IcePy._t_byte)

if '_t_LongArr' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network._t_LongArr = IcePy.defineSequence('::ALPD41Network::LongArr', (), IcePy._t_int)

_M_ALPD41Network.ALP_DEFAULT = 0

if 'AlpReturnCode' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpReturnCode = Ice.createTempClass()
    class AlpReturnCode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpReturnCode.OK = AlpReturnCode("OK", 0)
    AlpReturnCode.NOT_ONLINE = AlpReturnCode("NOT_ONLINE", 1001)
    AlpReturnCode.NOT_IDLE = AlpReturnCode("NOT_IDLE", 1002)
    AlpReturnCode.NOT_AVAILABLE = AlpReturnCode("NOT_AVAILABLE", 1003)
    AlpReturnCode.NOT_READY = AlpReturnCode("NOT_READY", 1004)
    AlpReturnCode.PARM_INVALID = AlpReturnCode("PARM_INVALID", 1005)
    AlpReturnCode.ADDR_INVALID = AlpReturnCode("ADDR_INVALID", 1006)
    AlpReturnCode.MEMORY_FULL = AlpReturnCode("MEMORY_FULL", 1007)
    AlpReturnCode.SEQ_IN_USE = AlpReturnCode("SEQ_IN_USE", 1008)
    AlpReturnCode.HALTED = AlpReturnCode("HALTED", 1009)
    AlpReturnCode.ERROR_INIT = AlpReturnCode("ERROR_INIT", 1010)
    AlpReturnCode.ERROR_COMM = AlpReturnCode("ERROR_COMM", 1011)
    AlpReturnCode.DEVICE_REMOVED = AlpReturnCode("DEVICE_REMOVED", 1012)
    AlpReturnCode.NOT_CONFIGURED = AlpReturnCode("NOT_CONFIGURED", 1013)
    AlpReturnCode.LOADER_VERSION = AlpReturnCode("LOADER_VERSION", 1014)
    AlpReturnCode.ERROR_POWER_DOWN = AlpReturnCode("ERROR_POWER_DOWN", 1018)
    AlpReturnCode.DRIVER_VERSION = AlpReturnCode("DRIVER_VERSION", 1019)
    AlpReturnCode.SDRAM_INIT = AlpReturnCode("SDRAM_INIT", 1020)
    AlpReturnCode.DEV_BUSY = AlpReturnCode("DEV_BUSY", 1100)
    AlpReturnCode.DEV_READY = AlpReturnCode("DEV_READY", 1101)
    AlpReturnCode.DEV_IDLE = AlpReturnCode("DEV_IDLE", 1102)
    AlpReturnCode.PROJ_ACTIVE = AlpReturnCode("PROJ_ACTIVE", 1200)
    AlpReturnCode.PROJ_IDLE = AlpReturnCode("PROJ_IDLE", 1201)
    AlpReturnCode._enumerators = { 0:AlpReturnCode.OK, 1001:AlpReturnCode.NOT_ONLINE, 1002:AlpReturnCode.NOT_IDLE, 1003:AlpReturnCode.NOT_AVAILABLE, 1004:AlpReturnCode.NOT_READY, 1005:AlpReturnCode.PARM_INVALID, 1006:AlpReturnCode.ADDR_INVALID, 1007:AlpReturnCode.MEMORY_FULL, 1008:AlpReturnCode.SEQ_IN_USE, 1009:AlpReturnCode.HALTED, 1010:AlpReturnCode.ERROR_INIT, 1011:AlpReturnCode.ERROR_COMM, 1012:AlpReturnCode.DEVICE_REMOVED, 1013:AlpReturnCode.NOT_CONFIGURED, 1014:AlpReturnCode.LOADER_VERSION, 1018:AlpReturnCode.ERROR_POWER_DOWN, 1019:AlpReturnCode.DRIVER_VERSION, 1020:AlpReturnCode.SDRAM_INIT, 1100:AlpReturnCode.DEV_BUSY, 1101:AlpReturnCode.DEV_READY, 1102:AlpReturnCode.DEV_IDLE, 1200:AlpReturnCode.PROJ_ACTIVE, 1201:AlpReturnCode.PROJ_IDLE }

    _M_ALPD41Network._t_AlpReturnCode = IcePy.defineEnum('::ALPD41Network::AlpReturnCode', AlpReturnCode, (), AlpReturnCode._enumerators)

    _M_ALPD41Network.AlpReturnCode = AlpReturnCode
    del AlpReturnCode

if 'AlpDevInquireType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpDevInquireType = Ice.createTempClass()
    class AlpDevInquireType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpDevInquireType.DEVICE_NUMBER = AlpDevInquireType("DEVICE_NUMBER", 2000)
    AlpDevInquireType.VERSION = AlpDevInquireType("VERSION", 2001)
    AlpDevInquireType.DEV_STATE = AlpDevInquireType("DEV_STATE", 2002)
    AlpDevInquireType.DEV_DMDTYPE = AlpDevInquireType("DEV_DMDTYPE", 2021)
    AlpDevInquireType.AVAIL_MEMORY = AlpDevInquireType("AVAIL_MEMORY", 2003)
    AlpDevInquireType.TRIGGER_TIME_OUT = AlpDevInquireType("TRIGGER_TIME_OUT", 2014)
    AlpDevInquireType.DDC_FPGA_TEMPERATURE = AlpDevInquireType("DDC_FPGA_TEMPERATURE", 2050)
    AlpDevInquireType.APPS_FPGA_TEMPERATURE = AlpDevInquireType("APPS_FPGA_TEMPERATURE", 2051)
    AlpDevInquireType.PCB_TEMPERATURE = AlpDevInquireType("PCB_TEMPERATURE", 2052)
    AlpDevInquireType.DEV_DISPLAY_HEIGHT = AlpDevInquireType("DEV_DISPLAY_HEIGHT", 2057)
    AlpDevInquireType.DEV_DISPLAY_WIDTH = AlpDevInquireType("DEV_DISPLAY_WIDTH", 2058)
    AlpDevInquireType._enumerators = { 2000:AlpDevInquireType.DEVICE_NUMBER, 2001:AlpDevInquireType.VERSION, 2002:AlpDevInquireType.DEV_STATE, 2021:AlpDevInquireType.DEV_DMDTYPE, 2003:AlpDevInquireType.AVAIL_MEMORY, 2014:AlpDevInquireType.TRIGGER_TIME_OUT, 2050:AlpDevInquireType.DDC_FPGA_TEMPERATURE, 2051:AlpDevInquireType.APPS_FPGA_TEMPERATURE, 2052:AlpDevInquireType.PCB_TEMPERATURE, 2057:AlpDevInquireType.DEV_DISPLAY_HEIGHT, 2058:AlpDevInquireType.DEV_DISPLAY_WIDTH }

    _M_ALPD41Network._t_AlpDevInquireType = IcePy.defineEnum('::ALPD41Network::AlpDevInquireType', AlpDevInquireType, (), AlpDevInquireType._enumerators)

    _M_ALPD41Network.AlpDevInquireType = AlpDevInquireType
    del AlpDevInquireType

if 'AlpDevControlType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpDevControlType = Ice.createTempClass()
    class AlpDevControlType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpDevControlType.SYNCH_POLARITY = AlpDevControlType("SYNCH_POLARITY", 2004)
    AlpDevControlType.TRIGGER_EDGE = AlpDevControlType("TRIGGER_EDGE", 2005)
    AlpDevControlType.USB_CONNECTION = AlpDevControlType("USB_CONNECTION", 2016)
    AlpDevControlType.DEV_DMD_MODE = AlpDevControlType("DEV_DMD_MODE", 2064)
    AlpDevControlType.PWM_LEVEL = AlpDevControlType("PWM_LEVEL", 2063)
    AlpDevControlType._enumerators = { 2004:AlpDevControlType.SYNCH_POLARITY, 2005:AlpDevControlType.TRIGGER_EDGE, 2016:AlpDevControlType.USB_CONNECTION, 2064:AlpDevControlType.DEV_DMD_MODE, 2063:AlpDevControlType.PWM_LEVEL }

    _M_ALPD41Network._t_AlpDevControlType = IcePy.defineEnum('::ALPD41Network::AlpDevControlType', AlpDevControlType, (), AlpDevControlType._enumerators)

    _M_ALPD41Network.AlpDevControlType = AlpDevControlType
    del AlpDevControlType

_M_ALPD41Network.LEVEL_HIGH = 2006

_M_ALPD41Network.LEVEL_LOW = 2007

_M_ALPD41Network.EDGE_FALLING = 2008

_M_ALPD41Network.EDGE_RISING = 2009

_M_ALPD41Network.TIME_OUT_ENABLE = 0

_M_ALPD41Network.TIME_OUT_DISABLE = 1

_M_ALPD41Network.DMD_POWER_FLOAT = 1

if 'AlpDevDmdType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpDevDmdType = Ice.createTempClass()
    class AlpDevDmdType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpDevDmdType.DMDTYPE_XGA = AlpDevDmdType("DMDTYPE_XGA", 1)
    AlpDevDmdType.DMDTYPE_SXGA_PLUS = AlpDevDmdType("DMDTYPE_SXGA_PLUS", 2)
    AlpDevDmdType.DMDTYPE_1080P_095A = AlpDevDmdType("DMDTYPE_1080P_095A", 3)
    AlpDevDmdType.DMDTYPE_XGA_07A = AlpDevDmdType("DMDTYPE_XGA_07A", 4)
    AlpDevDmdType.DMDTYPE_XGA_055A = AlpDevDmdType("DMDTYPE_XGA_055A", 5)
    AlpDevDmdType.DMDTYPE_XGA_055X = AlpDevDmdType("DMDTYPE_XGA_055X", 6)
    AlpDevDmdType.DMDTYPE_WUXGA_096A = AlpDevDmdType("DMDTYPE_WUXGA_096A", 7)
    AlpDevDmdType.DMDTYPE_DISCONNECT = AlpDevDmdType("DMDTYPE_DISCONNECT", 255)
    AlpDevDmdType._enumerators = { 1:AlpDevDmdType.DMDTYPE_XGA, 2:AlpDevDmdType.DMDTYPE_SXGA_PLUS, 3:AlpDevDmdType.DMDTYPE_1080P_095A, 4:AlpDevDmdType.DMDTYPE_XGA_07A, 5:AlpDevDmdType.DMDTYPE_XGA_055A, 6:AlpDevDmdType.DMDTYPE_XGA_055X, 7:AlpDevDmdType.DMDTYPE_WUXGA_096A, 255:AlpDevDmdType.DMDTYPE_DISCONNECT }

    _M_ALPD41Network._t_AlpDevDmdType = IcePy.defineEnum('::ALPD41Network::AlpDevDmdType', AlpDevDmdType, (), AlpDevDmdType._enumerators)

    _M_ALPD41Network.AlpDevDmdType = AlpDevDmdType
    del AlpDevDmdType

if 'AlpSeqControlType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpSeqControlType = Ice.createTempClass()
    class AlpSeqControlType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpSeqControlType.SEQ_REPEAT = AlpSeqControlType("SEQ_REPEAT", 2100)
    AlpSeqControlType.FIRSTFRAME = AlpSeqControlType("FIRSTFRAME", 2101)
    AlpSeqControlType.LASTFRAME = AlpSeqControlType("LASTFRAME", 2102)
    AlpSeqControlType.BITNUM = AlpSeqControlType("BITNUM", 2103)
    AlpSeqControlType.BIN_MODE = AlpSeqControlType("BIN_MODE", 2104)
    AlpSeqControlType.PWM_MODE = AlpSeqControlType("PWM_MODE", 2107)
    AlpSeqControlType.DATA_FORMAT = AlpSeqControlType("DATA_FORMAT", 2110)
    AlpSeqControlType.SEQ_PUT_LOCK = AlpSeqControlType("SEQ_PUT_LOCK", 2119)
    AlpSeqControlType.FIRSTLINE = AlpSeqControlType("FIRSTLINE", 2111)
    AlpSeqControlType.LASTLINE = AlpSeqControlType("LASTLINE", 2112)
    AlpSeqControlType.LINE_INC = AlpSeqControlType("LINE_INC", 2113)
    AlpSeqControlType.SCROLL_FROM_ROW = AlpSeqControlType("SCROLL_FROM_ROW", 2123)
    AlpSeqControlType.SCROLL_TO_ROW = AlpSeqControlType("SCROLL_TO_ROW", 2124)
    AlpSeqControlType.DEV_DYN_SYNCH_OUT1_GATE = AlpSeqControlType("DEV_DYN_SYNCH_OUT1_GATE", 2023)
    AlpSeqControlType.DEV_DYN_SYNCH_OUT2_GATE = AlpSeqControlType("DEV_DYN_SYNCH_OUT2_GATE", 2024)
    AlpSeqControlType.DEV_DYN_SYNCH_OUT3_GATE = AlpSeqControlType("DEV_DYN_SYNCH_OUT3_GATE", 2025)
    AlpSeqControlType.FLUT_MODE = AlpSeqControlType("FLUT_MODE", 2118)
    AlpSeqControlType.FLUT_ENTRIES9 = AlpSeqControlType("FLUT_ENTRIES9", 2120)
    AlpSeqControlType.FLUT_OFFSET9 = AlpSeqControlType("FLUT_OFFSET9", 2122)
    AlpSeqControlType._enumerators = { 2100:AlpSeqControlType.SEQ_REPEAT, 2101:AlpSeqControlType.FIRSTFRAME, 2102:AlpSeqControlType.LASTFRAME, 2103:AlpSeqControlType.BITNUM, 2104:AlpSeqControlType.BIN_MODE, 2107:AlpSeqControlType.PWM_MODE, 2110:AlpSeqControlType.DATA_FORMAT, 2119:AlpSeqControlType.SEQ_PUT_LOCK, 2111:AlpSeqControlType.FIRSTLINE, 2112:AlpSeqControlType.LASTLINE, 2113:AlpSeqControlType.LINE_INC, 2123:AlpSeqControlType.SCROLL_FROM_ROW, 2124:AlpSeqControlType.SCROLL_TO_ROW, 2023:AlpSeqControlType.DEV_DYN_SYNCH_OUT1_GATE, 2024:AlpSeqControlType.DEV_DYN_SYNCH_OUT2_GATE, 2025:AlpSeqControlType.DEV_DYN_SYNCH_OUT3_GATE, 2118:AlpSeqControlType.FLUT_MODE, 2120:AlpSeqControlType.FLUT_ENTRIES9, 2122:AlpSeqControlType.FLUT_OFFSET9 }

    _M_ALPD41Network._t_AlpSeqControlType = IcePy.defineEnum('::ALPD41Network::AlpSeqControlType', AlpSeqControlType, (), AlpSeqControlType._enumerators)

    _M_ALPD41Network.AlpSeqControlType = AlpSeqControlType
    del AlpSeqControlType

_M_ALPD41Network.BIN_NORMAL = 2105

_M_ALPD41Network.BIN_UNINTERRUPTED = 2106

_M_ALPD41Network.FLEX_PWM = 3

_M_ALPD41Network.DATA_MSB_ALIGN = 0

_M_ALPD41Network.DATA_LSB_ALIGN = 1

_M_ALPD41Network.DATA_BINARY_TOPDOWN = 2

_M_ALPD41Network.DATA_BINARY_BOTTOMUP = 3

_M_ALPD41Network.FLUT_NONE = 0

_M_ALPD41Network.FLUT_9BIT = 1

_M_ALPD41Network.FLUT_18BIT = 2

_M_ALPD41Network.SEQ_DMD_LINES = 2125

if 'AlpSeqInquireType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpSeqInquireType = Ice.createTempClass()
    class AlpSeqInquireType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpSeqInquireType.BITPLANES = AlpSeqInquireType("BITPLANES", 2200)
    AlpSeqInquireType.PICNUM = AlpSeqInquireType("PICNUM", 2201)
    AlpSeqInquireType.PICTURE_TIME = AlpSeqInquireType("PICTURE_TIME", 2203)
    AlpSeqInquireType.ILLUMINATE_TIME = AlpSeqInquireType("ILLUMINATE_TIME", 2204)
    AlpSeqInquireType.SYNCH_DELAY = AlpSeqInquireType("SYNCH_DELAY", 2205)
    AlpSeqInquireType.SYNCH_PULSEWIDTH = AlpSeqInquireType("SYNCH_PULSEWIDTH", 2206)
    AlpSeqInquireType.TRIGGER_IN_DELAY = AlpSeqInquireType("TRIGGER_IN_DELAY", 2207)
    AlpSeqInquireType.MAX_SYNCH_DELAY = AlpSeqInquireType("MAX_SYNCH_DELAY", 2209)
    AlpSeqInquireType.MAX_TRIGGER_IN_DELAY = AlpSeqInquireType("MAX_TRIGGER_IN_DELAY", 2210)
    AlpSeqInquireType.MIN_PICTURE_TIME = AlpSeqInquireType("MIN_PICTURE_TIME", 2211)
    AlpSeqInquireType.MIN_ILLUMINATE_TIME = AlpSeqInquireType("MIN_ILLUMINATE_TIME", 2212)
    AlpSeqInquireType.MAX_PICTURE_TIME = AlpSeqInquireType("MAX_PICTURE_TIME", 2213)
    AlpSeqInquireType.ON_TIME = AlpSeqInquireType("ON_TIME", 2214)
    AlpSeqInquireType.OFF_TIME = AlpSeqInquireType("OFF_TIME", 2215)
    AlpSeqInquireType.FLUT_MODE = AlpSeqInquireType("FLUT_MODE", 2118)
    AlpSeqInquireType.FLUT_ENTRIES9 = AlpSeqInquireType("FLUT_ENTRIES9", 2120)
    AlpSeqInquireType.FLUT_OFFSET9 = AlpSeqInquireType("FLUT_OFFSET9", 2122)
    AlpSeqInquireType._enumerators = { 2200:AlpSeqInquireType.BITPLANES, 2201:AlpSeqInquireType.PICNUM, 2203:AlpSeqInquireType.PICTURE_TIME, 2204:AlpSeqInquireType.ILLUMINATE_TIME, 2205:AlpSeqInquireType.SYNCH_DELAY, 2206:AlpSeqInquireType.SYNCH_PULSEWIDTH, 2207:AlpSeqInquireType.TRIGGER_IN_DELAY, 2209:AlpSeqInquireType.MAX_SYNCH_DELAY, 2210:AlpSeqInquireType.MAX_TRIGGER_IN_DELAY, 2211:AlpSeqInquireType.MIN_PICTURE_TIME, 2212:AlpSeqInquireType.MIN_ILLUMINATE_TIME, 2213:AlpSeqInquireType.MAX_PICTURE_TIME, 2214:AlpSeqInquireType.ON_TIME, 2215:AlpSeqInquireType.OFF_TIME, 2118:AlpSeqInquireType.FLUT_MODE, 2120:AlpSeqInquireType.FLUT_ENTRIES9, 2122:AlpSeqInquireType.FLUT_OFFSET9 }

    _M_ALPD41Network._t_AlpSeqInquireType = IcePy.defineEnum('::ALPD41Network::AlpSeqInquireType', AlpSeqInquireType, (), AlpSeqInquireType._enumerators)

    _M_ALPD41Network.AlpSeqInquireType = AlpSeqInquireType
    del AlpSeqInquireType

if 'AlpProjInquireType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpProjInquireType = Ice.createTempClass()
    class AlpProjInquireType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpProjInquireType.PROJ_MODE = AlpProjInquireType("PROJ_MODE", 2300)
    AlpProjInquireType.PROJ_STEP = AlpProjInquireType("PROJ_STEP", 2329)
    AlpProjInquireType.PROJ_INVERSION = AlpProjInquireType("PROJ_INVERSION", 2306)
    AlpProjInquireType.PROJ_UPSIDE_DOWN = AlpProjInquireType("PROJ_UPSIDE_DOWN", 2307)
    AlpProjInquireType.PROJ_STATE = AlpProjInquireType("PROJ_STATE", 2400)
    AlpProjInquireType.FLUT_MAX_ENTRIES9 = AlpProjInquireType("FLUT_MAX_ENTRIES9", 2324)
    AlpProjInquireType.PROJ_WAIT_UNTIL = AlpProjInquireType("PROJ_WAIT_UNTIL", 2323)
    AlpProjInquireType.PROJ_QUEUE_MODE = AlpProjInquireType("PROJ_QUEUE_MODE", 2314)
    AlpProjInquireType.PROJ_QUEUE_ID = AlpProjInquireType("PROJ_QUEUE_ID", 2315)
    AlpProjInquireType.PROJ_QUEUE_MAX_AVAIL = AlpProjInquireType("PROJ_QUEUE_MAX_AVAIL", 2316)
    AlpProjInquireType.PROJ_QUEUE_AVAIL = AlpProjInquireType("PROJ_QUEUE_AVAIL", 2317)
    AlpProjInquireType.PROJ_PROGRESS = AlpProjInquireType("PROJ_PROGRESS", 2318)
    AlpProjInquireType._enumerators = { 2300:AlpProjInquireType.PROJ_MODE, 2329:AlpProjInquireType.PROJ_STEP, 2306:AlpProjInquireType.PROJ_INVERSION, 2307:AlpProjInquireType.PROJ_UPSIDE_DOWN, 2400:AlpProjInquireType.PROJ_STATE, 2324:AlpProjInquireType.FLUT_MAX_ENTRIES9, 2323:AlpProjInquireType.PROJ_WAIT_UNTIL, 2314:AlpProjInquireType.PROJ_QUEUE_MODE, 2315:AlpProjInquireType.PROJ_QUEUE_ID, 2316:AlpProjInquireType.PROJ_QUEUE_MAX_AVAIL, 2317:AlpProjInquireType.PROJ_QUEUE_AVAIL, 2318:AlpProjInquireType.PROJ_PROGRESS }

    _M_ALPD41Network._t_AlpProjInquireType = IcePy.defineEnum('::ALPD41Network::AlpProjInquireType', AlpProjInquireType, (), AlpProjInquireType._enumerators)

    _M_ALPD41Network.AlpProjInquireType = AlpProjInquireType
    del AlpProjInquireType

_M_ALPD41Network.MASTER = 2301

_M_ALPD41Network.SLAVE = 2302

_M_ALPD41Network.PROJ_SYNC = 2303

_M_ALPD41Network.SYNCHRONOUS = 2304

_M_ALPD41Network.ASYNCHRONOUS = 2305

_M_ALPD41Network.PROJ_LEGACY = 0

_M_ALPD41Network.PROJ_SEQUENCE_QUEUE = 1

_M_ALPD41Network.PROJ_WAIT_PIC_TIME = 0

_M_ALPD41Network.PROJ_WAIT_ILLU_TIME = 1

_M_ALPD41Network.FLAG_QUEUE_IDLE = 1

_M_ALPD41Network.FLAG_SEQUENCE_ABORTING = 2

_M_ALPD41Network.FLAG_SEQUENCE_INDEFINITE = 4

_M_ALPD41Network.FLAG_FRAME_FINISHED = 8

_M_ALPD41Network.FLAG_RSVD0 = 16

if 'AlpProjControlType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpProjControlType = Ice.createTempClass()
    class AlpProjControlType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpProjControlType.PROJ_MODE = AlpProjControlType("PROJ_MODE", 2300)
    AlpProjControlType.PROJ_STEP = AlpProjControlType("PROJ_STEP", 2329)
    AlpProjControlType.PROJ_INVERSION = AlpProjControlType("PROJ_INVERSION", 2306)
    AlpProjControlType.PROJ_UPSIDE_DOWN = AlpProjControlType("PROJ_UPSIDE_DOWN", 2307)
    AlpProjControlType.FLUT_WRITE_9BIT = AlpProjControlType("FLUT_WRITE_9BIT", 2325)
    AlpProjControlType.FLUT_WRITE_18BIT = AlpProjControlType("FLUT_WRITE_18BIT", 2326)
    AlpProjControlType.PROJ_QUEUE_MODE = AlpProjControlType("PROJ_QUEUE_MODE", 2314)
    AlpProjControlType.PROJ_RESET_QUEUE = AlpProjControlType("PROJ_RESET_QUEUE", 2319)
    AlpProjControlType.PROJ_ABORT_SEQUENCE = AlpProjControlType("PROJ_ABORT_SEQUENCE", 2320)
    AlpProjControlType.PROJ_ABORT_FRAME = AlpProjControlType("PROJ_ABORT_FRAME", 2321)
    AlpProjControlType.PROJ_WAIT_UNTIL = AlpProjControlType("PROJ_WAIT_UNTIL", 2323)
    AlpProjControlType._enumerators = { 2300:AlpProjControlType.PROJ_MODE, 2329:AlpProjControlType.PROJ_STEP, 2306:AlpProjControlType.PROJ_INVERSION, 2307:AlpProjControlType.PROJ_UPSIDE_DOWN, 2325:AlpProjControlType.FLUT_WRITE_9BIT, 2326:AlpProjControlType.FLUT_WRITE_18BIT, 2314:AlpProjControlType.PROJ_QUEUE_MODE, 2319:AlpProjControlType.PROJ_RESET_QUEUE, 2320:AlpProjControlType.PROJ_ABORT_SEQUENCE, 2321:AlpProjControlType.PROJ_ABORT_FRAME, 2323:AlpProjControlType.PROJ_WAIT_UNTIL }

    _M_ALPD41Network._t_AlpProjControlType = IcePy.defineEnum('::ALPD41Network::AlpProjControlType', AlpProjControlType, (), AlpProjControlType._enumerators)

    _M_ALPD41Network.AlpProjControlType = AlpProjControlType
    del AlpProjControlType

if 'AlpLedType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpLedType = Ice.createTempClass()
    class AlpLedType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpLedType.HLD_PT120_RED = AlpLedType("HLD_PT120_RED", 257)
    AlpLedType.HLD_PT120_GREEN = AlpLedType("HLD_PT120_GREEN", 258)
    AlpLedType.HLD_PT120_BLUE = AlpLedType("HLD_PT120_BLUE", 259)
    AlpLedType.HLD_CBT120_UV = AlpLedType("HLD_CBT120_UV", 260)
    AlpLedType.HLD_CBT90_WHITE = AlpLedType("HLD_CBT90_WHITE", 262)
    AlpLedType.HLD_PT120TE_BLUE = AlpLedType("HLD_PT120TE_BLUE", 263)
    AlpLedType.HLD_CBT140_WHITE = AlpLedType("HLD_CBT140_WHITE", 264)
    AlpLedType._enumerators = { 257:AlpLedType.HLD_PT120_RED, 258:AlpLedType.HLD_PT120_GREEN, 259:AlpLedType.HLD_PT120_BLUE, 260:AlpLedType.HLD_CBT120_UV, 262:AlpLedType.HLD_CBT90_WHITE, 263:AlpLedType.HLD_PT120TE_BLUE, 264:AlpLedType.HLD_CBT140_WHITE }

    _M_ALPD41Network._t_AlpLedType = IcePy.defineEnum('::ALPD41Network::AlpLedType', AlpLedType, (), AlpLedType._enumerators)

    _M_ALPD41Network.AlpLedType = AlpLedType
    del AlpLedType

if 'AlpLedControlType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpLedControlType = Ice.createTempClass()
    class AlpLedControlType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpLedControlType.LED_SET_CURRENT = AlpLedControlType("LED_SET_CURRENT", 1001)
    AlpLedControlType.LED_BRIGHTNESS = AlpLedControlType("LED_BRIGHTNESS", 1002)
    AlpLedControlType.LED_FORCE_OFF = AlpLedControlType("LED_FORCE_OFF", 1003)
    AlpLedControlType._enumerators = { 1001:AlpLedControlType.LED_SET_CURRENT, 1002:AlpLedControlType.LED_BRIGHTNESS, 1003:AlpLedControlType.LED_FORCE_OFF }

    _M_ALPD41Network._t_AlpLedControlType = IcePy.defineEnum('::ALPD41Network::AlpLedControlType', AlpLedControlType, (), AlpLedControlType._enumerators)

    _M_ALPD41Network.AlpLedControlType = AlpLedControlType
    del AlpLedControlType

_M_ALPD41Network.LED_AUTO_OFF = 0

_M_ALPD41Network.LED_OFF = 1

_M_ALPD41Network.LED_ON = 2

if 'AlpLedInquireType' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpLedInquireType = Ice.createTempClass()
    class AlpLedInquireType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlpLedInquireType.LED_TYPE = AlpLedInquireType("LED_TYPE", 1101)
    AlpLedInquireType.LED_MEASURED_CURRENT = AlpLedInquireType("LED_MEASURED_CURRENT", 1102)
    AlpLedInquireType.LED_TEMPERATURE_REF = AlpLedInquireType("LED_TEMPERATURE_REF", 1103)
    AlpLedInquireType.LED_TEMPERATURE_JUNCTION = AlpLedInquireType("LED_TEMPERATURE_JUNCTION", 1104)
    AlpLedInquireType.LED_ALLOC_PARAMS = AlpLedInquireType("LED_ALLOC_PARAMS", 2101)
    AlpLedInquireType._enumerators = { 1101:AlpLedInquireType.LED_TYPE, 1102:AlpLedInquireType.LED_MEASURED_CURRENT, 1103:AlpLedInquireType.LED_TEMPERATURE_REF, 1104:AlpLedInquireType.LED_TEMPERATURE_JUNCTION, 2101:AlpLedInquireType.LED_ALLOC_PARAMS }

    _M_ALPD41Network._t_AlpLedInquireType = IcePy.defineEnum('::ALPD41Network::AlpLedInquireType', AlpLedInquireType, (), AlpLedInquireType._enumerators)

    _M_ALPD41Network.AlpLedInquireType = AlpLedInquireType
    del AlpLedInquireType

if 'AlpDynSynchOutGate' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpDynSynchOutGate = Ice.createTempClass()
    class AlpDynSynchOutGate(object):
        def __init__(self, Period=0, Polarity=0, Gate=None):
            self.Period = Period
            self.Polarity = Polarity
            self.Gate = Gate

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.Period)
            _h = 5 * _h + Ice.getHash(self.Polarity)
            if self.Gate:
                for _i0 in self.Gate:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ALPD41Network.AlpDynSynchOutGate):
                return NotImplemented
            else:
                if self.Period is None or other.Period is None:
                    if self.Period != other.Period:
                        return (-1 if self.Period is None else 1)
                else:
                    if self.Period < other.Period:
                        return -1
                    elif self.Period > other.Period:
                        return 1
                if self.Polarity is None or other.Polarity is None:
                    if self.Polarity != other.Polarity:
                        return (-1 if self.Polarity is None else 1)
                else:
                    if self.Polarity < other.Polarity:
                        return -1
                    elif self.Polarity > other.Polarity:
                        return 1
                if self.Gate is None or other.Gate is None:
                    if self.Gate != other.Gate:
                        return (-1 if self.Gate is None else 1)
                else:
                    if self.Gate < other.Gate:
                        return -1
                    elif self.Gate > other.Gate:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ALPD41Network._t_AlpDynSynchOutGate)

        __repr__ = __str__

    _M_ALPD41Network._t_AlpDynSynchOutGate = IcePy.defineStruct('::ALPD41Network::AlpDynSynchOutGate', AlpDynSynchOutGate, (), (
        ('Period', (), IcePy._t_byte),
        ('Polarity', (), IcePy._t_byte),
        ('Gate', (), _M_ALPD41Network._t_ByteArr)
    ))

    _M_ALPD41Network.AlpDynSynchOutGate = AlpDynSynchOutGate
    del AlpDynSynchOutGate

if 'FlutWrite' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.FlutWrite = Ice.createTempClass()
    class FlutWrite(object):
        def __init__(self, nOffset=0, nSize=0, FrameNumbers=None):
            self.nOffset = nOffset
            self.nSize = nSize
            self.FrameNumbers = FrameNumbers

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.nOffset)
            _h = 5 * _h + Ice.getHash(self.nSize)
            if self.FrameNumbers:
                for _i0 in self.FrameNumbers:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ALPD41Network.FlutWrite):
                return NotImplemented
            else:
                if self.nOffset is None or other.nOffset is None:
                    if self.nOffset != other.nOffset:
                        return (-1 if self.nOffset is None else 1)
                else:
                    if self.nOffset < other.nOffset:
                        return -1
                    elif self.nOffset > other.nOffset:
                        return 1
                if self.nSize is None or other.nSize is None:
                    if self.nSize != other.nSize:
                        return (-1 if self.nSize is None else 1)
                else:
                    if self.nSize < other.nSize:
                        return -1
                    elif self.nSize > other.nSize:
                        return 1
                if self.FrameNumbers is None or other.FrameNumbers is None:
                    if self.FrameNumbers != other.FrameNumbers:
                        return (-1 if self.FrameNumbers is None else 1)
                else:
                    if self.FrameNumbers < other.FrameNumbers:
                        return -1
                    elif self.FrameNumbers > other.FrameNumbers:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ALPD41Network._t_FlutWrite)

        __repr__ = __str__

    _M_ALPD41Network._t_FlutWrite = IcePy.defineStruct('::ALPD41Network::FlutWrite', FlutWrite, (), (
        ('nOffset', (), IcePy._t_int),
        ('nSize', (), IcePy._t_int),
        ('FrameNumbers', (), _M_ALPD41Network._t_LongArr)
    ))

    _M_ALPD41Network.FlutWrite = FlutWrite
    del FlutWrite

if 'AlpProjProgress' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpProjProgress = Ice.createTempClass()
    class AlpProjProgress(object):
        def __init__(self, CurrentQueueId=0, SequenceId=0, nWaitingSequences=0, nSequenceCounter=0, nSequenceCounterUnderflow=0, nFrameCounter=0, nPictureTime=0, nFramesPerSubSequence=0, nFlags=0):
            self.CurrentQueueId = CurrentQueueId
            self.SequenceId = SequenceId
            self.nWaitingSequences = nWaitingSequences
            self.nSequenceCounter = nSequenceCounter
            self.nSequenceCounterUnderflow = nSequenceCounterUnderflow
            self.nFrameCounter = nFrameCounter
            self.nPictureTime = nPictureTime
            self.nFramesPerSubSequence = nFramesPerSubSequence
            self.nFlags = nFlags

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.CurrentQueueId)
            _h = 5 * _h + Ice.getHash(self.SequenceId)
            _h = 5 * _h + Ice.getHash(self.nWaitingSequences)
            _h = 5 * _h + Ice.getHash(self.nSequenceCounter)
            _h = 5 * _h + Ice.getHash(self.nSequenceCounterUnderflow)
            _h = 5 * _h + Ice.getHash(self.nFrameCounter)
            _h = 5 * _h + Ice.getHash(self.nPictureTime)
            _h = 5 * _h + Ice.getHash(self.nFramesPerSubSequence)
            _h = 5 * _h + Ice.getHash(self.nFlags)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ALPD41Network.AlpProjProgress):
                return NotImplemented
            else:
                if self.CurrentQueueId is None or other.CurrentQueueId is None:
                    if self.CurrentQueueId != other.CurrentQueueId:
                        return (-1 if self.CurrentQueueId is None else 1)
                else:
                    if self.CurrentQueueId < other.CurrentQueueId:
                        return -1
                    elif self.CurrentQueueId > other.CurrentQueueId:
                        return 1
                if self.SequenceId is None or other.SequenceId is None:
                    if self.SequenceId != other.SequenceId:
                        return (-1 if self.SequenceId is None else 1)
                else:
                    if self.SequenceId < other.SequenceId:
                        return -1
                    elif self.SequenceId > other.SequenceId:
                        return 1
                if self.nWaitingSequences is None or other.nWaitingSequences is None:
                    if self.nWaitingSequences != other.nWaitingSequences:
                        return (-1 if self.nWaitingSequences is None else 1)
                else:
                    if self.nWaitingSequences < other.nWaitingSequences:
                        return -1
                    elif self.nWaitingSequences > other.nWaitingSequences:
                        return 1
                if self.nSequenceCounter is None or other.nSequenceCounter is None:
                    if self.nSequenceCounter != other.nSequenceCounter:
                        return (-1 if self.nSequenceCounter is None else 1)
                else:
                    if self.nSequenceCounter < other.nSequenceCounter:
                        return -1
                    elif self.nSequenceCounter > other.nSequenceCounter:
                        return 1
                if self.nSequenceCounterUnderflow is None or other.nSequenceCounterUnderflow is None:
                    if self.nSequenceCounterUnderflow != other.nSequenceCounterUnderflow:
                        return (-1 if self.nSequenceCounterUnderflow is None else 1)
                else:
                    if self.nSequenceCounterUnderflow < other.nSequenceCounterUnderflow:
                        return -1
                    elif self.nSequenceCounterUnderflow > other.nSequenceCounterUnderflow:
                        return 1
                if self.nFrameCounter is None or other.nFrameCounter is None:
                    if self.nFrameCounter != other.nFrameCounter:
                        return (-1 if self.nFrameCounter is None else 1)
                else:
                    if self.nFrameCounter < other.nFrameCounter:
                        return -1
                    elif self.nFrameCounter > other.nFrameCounter:
                        return 1
                if self.nPictureTime is None or other.nPictureTime is None:
                    if self.nPictureTime != other.nPictureTime:
                        return (-1 if self.nPictureTime is None else 1)
                else:
                    if self.nPictureTime < other.nPictureTime:
                        return -1
                    elif self.nPictureTime > other.nPictureTime:
                        return 1
                if self.nFramesPerSubSequence is None or other.nFramesPerSubSequence is None:
                    if self.nFramesPerSubSequence != other.nFramesPerSubSequence:
                        return (-1 if self.nFramesPerSubSequence is None else 1)
                else:
                    if self.nFramesPerSubSequence < other.nFramesPerSubSequence:
                        return -1
                    elif self.nFramesPerSubSequence > other.nFramesPerSubSequence:
                        return 1
                if self.nFlags is None or other.nFlags is None:
                    if self.nFlags != other.nFlags:
                        return (-1 if self.nFlags is None else 1)
                else:
                    if self.nFlags < other.nFlags:
                        return -1
                    elif self.nFlags > other.nFlags:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ALPD41Network._t_AlpProjProgress)

        __repr__ = __str__

    _M_ALPD41Network._t_AlpProjProgress = IcePy.defineStruct('::ALPD41Network::AlpProjProgress', AlpProjProgress, (), (
        ('CurrentQueueId', (), IcePy._t_int),
        ('SequenceId', (), IcePy._t_int),
        ('nWaitingSequences', (), IcePy._t_int),
        ('nSequenceCounter', (), IcePy._t_int),
        ('nSequenceCounterUnderflow', (), IcePy._t_int),
        ('nFrameCounter', (), IcePy._t_int),
        ('nPictureTime', (), IcePy._t_int),
        ('nFramesPerSubSequence', (), IcePy._t_int),
        ('nFlags', (), IcePy._t_int)
    ))

    _M_ALPD41Network.AlpProjProgress = AlpProjProgress
    del AlpProjProgress

if 'AlpHldPt120AllocParams' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpHldPt120AllocParams = Ice.createTempClass()
    class AlpHldPt120AllocParams(object):
        def __init__(self, I2cDacAddr=0, I2cAdcAddr=0):
            self.I2cDacAddr = I2cDacAddr
            self.I2cAdcAddr = I2cAdcAddr

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.I2cDacAddr)
            _h = 5 * _h + Ice.getHash(self.I2cAdcAddr)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ALPD41Network.AlpHldPt120AllocParams):
                return NotImplemented
            else:
                if self.I2cDacAddr is None or other.I2cDacAddr is None:
                    if self.I2cDacAddr != other.I2cDacAddr:
                        return (-1 if self.I2cDacAddr is None else 1)
                else:
                    if self.I2cDacAddr < other.I2cDacAddr:
                        return -1
                    elif self.I2cDacAddr > other.I2cDacAddr:
                        return 1
                if self.I2cAdcAddr is None or other.I2cAdcAddr is None:
                    if self.I2cAdcAddr != other.I2cAdcAddr:
                        return (-1 if self.I2cAdcAddr is None else 1)
                else:
                    if self.I2cAdcAddr < other.I2cAdcAddr:
                        return -1
                    elif self.I2cAdcAddr > other.I2cAdcAddr:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ALPD41Network._t_AlpHldPt120AllocParams)

        __repr__ = __str__

    _M_ALPD41Network._t_AlpHldPt120AllocParams = IcePy.defineStruct('::ALPD41Network::AlpHldPt120AllocParams', AlpHldPt120AllocParams, (), (
        ('I2cDacAddr', (), IcePy._t_int),
        ('I2cAdcAddr', (), IcePy._t_int)
    ))

    _M_ALPD41Network.AlpHldPt120AllocParams = AlpHldPt120AllocParams
    del AlpHldPt120AllocParams

if 'AlpError' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.AlpError = Ice.createTempClass()
    class AlpError(Ice.UserException):
        def __init__(self, errNo=_M_ALPD41Network.AlpReturnCode.OK):
            self.errNo = errNo

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::ALPD41Network::AlpError'

    _M_ALPD41Network._t_AlpError = IcePy.defineException('::ALPD41Network::AlpError', AlpError, (), False, None, (('errNo', (), _M_ALPD41Network._t_AlpReturnCode, False, 0),))
    AlpError._ice_type = _M_ALPD41Network._t_AlpError

    _M_ALPD41Network.AlpError = AlpError
    del AlpError

_M_ALPD41Network._t_ALPD41 = IcePy.defineValue('::ALPD41Network::ALPD41', Ice.Value, -1, (), False, True, None, ())

if 'ALPD41Prx' not in _M_ALPD41Network.__dict__:
    _M_ALPD41Network.ALPD41Prx = Ice.createTempClass()
    class ALPD41Prx(Ice.ObjectPrx):

        def listOpenDeviceId(self, context=None):
            return _M_ALPD41Network.ALPD41._op_listOpenDeviceId.invoke(self, ((), context))

        def listOpenDeviceIdAsync(self, context=None):
            return _M_ALPD41Network.ALPD41._op_listOpenDeviceId.invokeAsync(self, ((), context))

        def begin_listOpenDeviceId(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_listOpenDeviceId.begin(self, ((), _response, _ex, _sent, context))

        def end_listOpenDeviceId(self, _r):
            return _M_ALPD41Network.ALPD41._op_listOpenDeviceId.end(self, _r)

        def freeAllDevices(self, context=None):
            return _M_ALPD41Network.ALPD41._op_freeAllDevices.invoke(self, ((), context))

        def freeAllDevicesAsync(self, context=None):
            return _M_ALPD41Network.ALPD41._op_freeAllDevices.invokeAsync(self, ((), context))

        def begin_freeAllDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_freeAllDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_freeAllDevices(self, _r):
            return _M_ALPD41Network.ALPD41._op_freeAllDevices.end(self, _r)

        def AlpDevAlloc(self, DeviceNum, InitFlag, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevAlloc.invoke(self, ((DeviceNum, InitFlag), context))

        def AlpDevAllocAsync(self, DeviceNum, InitFlag, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevAlloc.invokeAsync(self, ((DeviceNum, InitFlag), context))

        def begin_AlpDevAlloc(self, DeviceNum, InitFlag, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevAlloc.begin(self, ((DeviceNum, InitFlag), _response, _ex, _sent, context))

        def end_AlpDevAlloc(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpDevAlloc.end(self, _r)

        def AlpDevHalt(self, DeviceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevHalt.invoke(self, ((DeviceId, ), context))

        def AlpDevHaltAsync(self, DeviceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevHalt.invokeAsync(self, ((DeviceId, ), context))

        def begin_AlpDevHalt(self, DeviceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevHalt.begin(self, ((DeviceId, ), _response, _ex, _sent, context))

        def end_AlpDevHalt(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpDevHalt.end(self, _r)

        def AlpDevFree(self, DeviceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevFree.invoke(self, ((DeviceId, ), context))

        def AlpDevFreeAsync(self, DeviceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevFree.invokeAsync(self, ((DeviceId, ), context))

        def begin_AlpDevFree(self, DeviceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevFree.begin(self, ((DeviceId, ), _response, _ex, _sent, context))

        def end_AlpDevFree(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpDevFree.end(self, _r)

        def AlpDevControl(self, DeviceId, ControlType, ControlValue, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevControl.invoke(self, ((DeviceId, ControlType, ControlValue), context))

        def AlpDevControlAsync(self, DeviceId, ControlType, ControlValue, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevControl.invokeAsync(self, ((DeviceId, ControlType, ControlValue), context))

        def begin_AlpDevControl(self, DeviceId, ControlType, ControlValue, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevControl.begin(self, ((DeviceId, ControlType, ControlValue), _response, _ex, _sent, context))

        def end_AlpDevControl(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpDevControl.end(self, _r)

        def AlpDevControlEx(self, DeviceId, ControlType, UserStruct, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevControlEx.invoke(self, ((DeviceId, ControlType, UserStruct), context))

        def AlpDevControlExAsync(self, DeviceId, ControlType, UserStruct, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevControlEx.invokeAsync(self, ((DeviceId, ControlType, UserStruct), context))

        def begin_AlpDevControlEx(self, DeviceId, ControlType, UserStruct, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevControlEx.begin(self, ((DeviceId, ControlType, UserStruct), _response, _ex, _sent, context))

        def end_AlpDevControlEx(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpDevControlEx.end(self, _r)

        def AlpDevInquire(self, DeviceId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevInquire.invoke(self, ((DeviceId, InquireType), context))

        def AlpDevInquireAsync(self, DeviceId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevInquire.invokeAsync(self, ((DeviceId, InquireType), context))

        def begin_AlpDevInquire(self, DeviceId, InquireType, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpDevInquire.begin(self, ((DeviceId, InquireType), _response, _ex, _sent, context))

        def end_AlpDevInquire(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpDevInquire.end(self, _r)

        def AlpSeqAlloc(self, DeviceId, BitPlanes, PicNum, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqAlloc.invoke(self, ((DeviceId, BitPlanes, PicNum), context))

        def AlpSeqAllocAsync(self, DeviceId, BitPlanes, PicNum, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqAlloc.invokeAsync(self, ((DeviceId, BitPlanes, PicNum), context))

        def begin_AlpSeqAlloc(self, DeviceId, BitPlanes, PicNum, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqAlloc.begin(self, ((DeviceId, BitPlanes, PicNum), _response, _ex, _sent, context))

        def end_AlpSeqAlloc(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpSeqAlloc.end(self, _r)

        def AlpSeqFree(self, DeviceId, SequenceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqFree.invoke(self, ((DeviceId, SequenceId), context))

        def AlpSeqFreeAsync(self, DeviceId, SequenceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqFree.invokeAsync(self, ((DeviceId, SequenceId), context))

        def begin_AlpSeqFree(self, DeviceId, SequenceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqFree.begin(self, ((DeviceId, SequenceId), _response, _ex, _sent, context))

        def end_AlpSeqFree(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpSeqFree.end(self, _r)

        def AlpSeqControl(self, DeviceId, SequenceId, ControlType, ControlValue, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqControl.invoke(self, ((DeviceId, SequenceId, ControlType, ControlValue), context))

        def AlpSeqControlAsync(self, DeviceId, SequenceId, ControlType, ControlValue, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqControl.invokeAsync(self, ((DeviceId, SequenceId, ControlType, ControlValue), context))

        def begin_AlpSeqControl(self, DeviceId, SequenceId, ControlType, ControlValue, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqControl.begin(self, ((DeviceId, SequenceId, ControlType, ControlValue), _response, _ex, _sent, context))

        def end_AlpSeqControl(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpSeqControl.end(self, _r)

        def AlpSeqTiming(self, DeviceId, SequenceId, IlluminateTime, PictureTime, SynchDelay, SynchPulseWidth, TriggerInDelay, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqTiming.invoke(self, ((DeviceId, SequenceId, IlluminateTime, PictureTime, SynchDelay, SynchPulseWidth, TriggerInDelay), context))

        def AlpSeqTimingAsync(self, DeviceId, SequenceId, IlluminateTime, PictureTime, SynchDelay, SynchPulseWidth, TriggerInDelay, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqTiming.invokeAsync(self, ((DeviceId, SequenceId, IlluminateTime, PictureTime, SynchDelay, SynchPulseWidth, TriggerInDelay), context))

        def begin_AlpSeqTiming(self, DeviceId, SequenceId, IlluminateTime, PictureTime, SynchDelay, SynchPulseWidth, TriggerInDelay, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqTiming.begin(self, ((DeviceId, SequenceId, IlluminateTime, PictureTime, SynchDelay, SynchPulseWidth, TriggerInDelay), _response, _ex, _sent, context))

        def end_AlpSeqTiming(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpSeqTiming.end(self, _r)

        def AlpSeqInquire(self, DeviceId, SequenceId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqInquire.invoke(self, ((DeviceId, SequenceId, InquireType), context))

        def AlpSeqInquireAsync(self, DeviceId, SequenceId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqInquire.invokeAsync(self, ((DeviceId, SequenceId, InquireType), context))

        def begin_AlpSeqInquire(self, DeviceId, SequenceId, InquireType, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqInquire.begin(self, ((DeviceId, SequenceId, InquireType), _response, _ex, _sent, context))

        def end_AlpSeqInquire(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpSeqInquire.end(self, _r)

        def AlpSeqPut(self, DeviceId, SequenceId, PicOffset, PicLoad, UserArray, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqPut.invoke(self, ((DeviceId, SequenceId, PicOffset, PicLoad, UserArray), context))

        def AlpSeqPutAsync(self, DeviceId, SequenceId, PicOffset, PicLoad, UserArray, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqPut.invokeAsync(self, ((DeviceId, SequenceId, PicOffset, PicLoad, UserArray), context))

        def begin_AlpSeqPut(self, DeviceId, SequenceId, PicOffset, PicLoad, UserArray, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpSeqPut.begin(self, ((DeviceId, SequenceId, PicOffset, PicLoad, UserArray), _response, _ex, _sent, context))

        def end_AlpSeqPut(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpSeqPut.end(self, _r)

        def AlpProjStart(self, DeviceId, SequenceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjStart.invoke(self, ((DeviceId, SequenceId), context))

        def AlpProjStartAsync(self, DeviceId, SequenceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjStart.invokeAsync(self, ((DeviceId, SequenceId), context))

        def begin_AlpProjStart(self, DeviceId, SequenceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjStart.begin(self, ((DeviceId, SequenceId), _response, _ex, _sent, context))

        def end_AlpProjStart(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpProjStart.end(self, _r)

        def AlpProjStartCont(self, DeviceId, SequenceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjStartCont.invoke(self, ((DeviceId, SequenceId), context))

        def AlpProjStartContAsync(self, DeviceId, SequenceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjStartCont.invokeAsync(self, ((DeviceId, SequenceId), context))

        def begin_AlpProjStartCont(self, DeviceId, SequenceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjStartCont.begin(self, ((DeviceId, SequenceId), _response, _ex, _sent, context))

        def end_AlpProjStartCont(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpProjStartCont.end(self, _r)

        def AlpProjHalt(self, DeviceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjHalt.invoke(self, ((DeviceId, ), context))

        def AlpProjHaltAsync(self, DeviceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjHalt.invokeAsync(self, ((DeviceId, ), context))

        def begin_AlpProjHalt(self, DeviceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjHalt.begin(self, ((DeviceId, ), _response, _ex, _sent, context))

        def end_AlpProjHalt(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpProjHalt.end(self, _r)

        def AlpProjWait(self, DeviceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjWait.invoke(self, ((DeviceId, ), context))

        def AlpProjWaitAsync(self, DeviceId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjWait.invokeAsync(self, ((DeviceId, ), context))

        def begin_AlpProjWait(self, DeviceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjWait.begin(self, ((DeviceId, ), _response, _ex, _sent, context))

        def end_AlpProjWait(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpProjWait.end(self, _r)

        def AlpProjControl(self, DeviceId, ControlType, ControlValue, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjControl.invoke(self, ((DeviceId, ControlType, ControlValue), context))

        def AlpProjControlAsync(self, DeviceId, ControlType, ControlValue, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjControl.invokeAsync(self, ((DeviceId, ControlType, ControlValue), context))

        def begin_AlpProjControl(self, DeviceId, ControlType, ControlValue, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjControl.begin(self, ((DeviceId, ControlType, ControlValue), _response, _ex, _sent, context))

        def end_AlpProjControl(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpProjControl.end(self, _r)

        def AlpProjControlEx(self, DeviceId, ControlType, UserStruct, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjControlEx.invoke(self, ((DeviceId, ControlType, UserStruct), context))

        def AlpProjControlExAsync(self, DeviceId, ControlType, UserStruct, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjControlEx.invokeAsync(self, ((DeviceId, ControlType, UserStruct), context))

        def begin_AlpProjControlEx(self, DeviceId, ControlType, UserStruct, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjControlEx.begin(self, ((DeviceId, ControlType, UserStruct), _response, _ex, _sent, context))

        def end_AlpProjControlEx(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpProjControlEx.end(self, _r)

        def AlpProjInquire(self, DeviceId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjInquire.invoke(self, ((DeviceId, InquireType), context))

        def AlpProjInquireAsync(self, DeviceId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjInquire.invokeAsync(self, ((DeviceId, InquireType), context))

        def begin_AlpProjInquire(self, DeviceId, InquireType, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjInquire.begin(self, ((DeviceId, InquireType), _response, _ex, _sent, context))

        def end_AlpProjInquire(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpProjInquire.end(self, _r)

        def AlpProjInquireEx(self, DeviceId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjInquireEx.invoke(self, ((DeviceId, InquireType), context))

        def AlpProjInquireExAsync(self, DeviceId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjInquireEx.invokeAsync(self, ((DeviceId, InquireType), context))

        def begin_AlpProjInquireEx(self, DeviceId, InquireType, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpProjInquireEx.begin(self, ((DeviceId, InquireType), _response, _ex, _sent, context))

        def end_AlpProjInquireEx(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpProjInquireEx.end(self, _r)

        def AlpLedAlloc(self, DeviceId, LedType, UserStruct, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedAlloc.invoke(self, ((DeviceId, LedType, UserStruct), context))

        def AlpLedAllocAsync(self, DeviceId, LedType, UserStruct, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedAlloc.invokeAsync(self, ((DeviceId, LedType, UserStruct), context))

        def begin_AlpLedAlloc(self, DeviceId, LedType, UserStruct, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedAlloc.begin(self, ((DeviceId, LedType, UserStruct), _response, _ex, _sent, context))

        def end_AlpLedAlloc(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpLedAlloc.end(self, _r)

        def AlpLedFree(self, DeviceId, LedId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedFree.invoke(self, ((DeviceId, LedId), context))

        def AlpLedFreeAsync(self, DeviceId, LedId, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedFree.invokeAsync(self, ((DeviceId, LedId), context))

        def begin_AlpLedFree(self, DeviceId, LedId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedFree.begin(self, ((DeviceId, LedId), _response, _ex, _sent, context))

        def end_AlpLedFree(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpLedFree.end(self, _r)

        def AlpLedControl(self, DeviceId, LedId, ControlType, value, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedControl.invoke(self, ((DeviceId, LedId, ControlType, value), context))

        def AlpLedControlAsync(self, DeviceId, LedId, ControlType, value, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedControl.invokeAsync(self, ((DeviceId, LedId, ControlType, value), context))

        def begin_AlpLedControl(self, DeviceId, LedId, ControlType, value, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedControl.begin(self, ((DeviceId, LedId, ControlType, value), _response, _ex, _sent, context))

        def end_AlpLedControl(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpLedControl.end(self, _r)

        def AlpLedInquire(self, DeviceId, LedId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedInquire.invoke(self, ((DeviceId, LedId, InquireType), context))

        def AlpLedInquireAsync(self, DeviceId, LedId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedInquire.invokeAsync(self, ((DeviceId, LedId, InquireType), context))

        def begin_AlpLedInquire(self, DeviceId, LedId, InquireType, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedInquire.begin(self, ((DeviceId, LedId, InquireType), _response, _ex, _sent, context))

        def end_AlpLedInquire(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpLedInquire.end(self, _r)

        def AlpLedInquireEx(self, DeviceId, LedId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedInquireEx.invoke(self, ((DeviceId, LedId, InquireType), context))

        def AlpLedInquireExAsync(self, DeviceId, LedId, InquireType, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedInquireEx.invokeAsync(self, ((DeviceId, LedId, InquireType), context))

        def begin_AlpLedInquireEx(self, DeviceId, LedId, InquireType, _response=None, _ex=None, _sent=None, context=None):
            return _M_ALPD41Network.ALPD41._op_AlpLedInquireEx.begin(self, ((DeviceId, LedId, InquireType), _response, _ex, _sent, context))

        def end_AlpLedInquireEx(self, _r):
            return _M_ALPD41Network.ALPD41._op_AlpLedInquireEx.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ALPD41Network.ALPD41Prx.ice_checkedCast(proxy, '::ALPD41Network::ALPD41', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ALPD41Network.ALPD41Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ALPD41Network::ALPD41'
    _M_ALPD41Network._t_ALPD41Prx = IcePy.defineProxy('::ALPD41Network::ALPD41', ALPD41Prx)

    _M_ALPD41Network.ALPD41Prx = ALPD41Prx
    del ALPD41Prx

    _M_ALPD41Network.ALPD41 = Ice.createTempClass()
    class ALPD41(Ice.Object):

        def ice_ids(self, current=None):
            return ('::ALPD41Network::ALPD41', '::Ice::Object')

        def ice_id(self, current=None):
            return '::ALPD41Network::ALPD41'

        @staticmethod
        def ice_staticId():
            return '::ALPD41Network::ALPD41'

        def listOpenDeviceId(self, current=None):
            raise NotImplementedError("servant method 'listOpenDeviceId' not implemented")

        def freeAllDevices(self, current=None):
            raise NotImplementedError("servant method 'freeAllDevices' not implemented")

        def AlpDevAlloc(self, DeviceNum, InitFlag, current=None):
            raise NotImplementedError("servant method 'AlpDevAlloc' not implemented")

        def AlpDevHalt(self, DeviceId, current=None):
            raise NotImplementedError("servant method 'AlpDevHalt' not implemented")

        def AlpDevFree(self, DeviceId, current=None):
            raise NotImplementedError("servant method 'AlpDevFree' not implemented")

        def AlpDevControl(self, DeviceId, ControlType, ControlValue, current=None):
            raise NotImplementedError("servant method 'AlpDevControl' not implemented")

        def AlpDevControlEx(self, DeviceId, ControlType, UserStruct, current=None):
            raise NotImplementedError("servant method 'AlpDevControlEx' not implemented")

        def AlpDevInquire(self, DeviceId, InquireType, current=None):
            raise NotImplementedError("servant method 'AlpDevInquire' not implemented")

        def AlpSeqAlloc(self, DeviceId, BitPlanes, PicNum, current=None):
            raise NotImplementedError("servant method 'AlpSeqAlloc' not implemented")

        def AlpSeqFree(self, DeviceId, SequenceId, current=None):
            raise NotImplementedError("servant method 'AlpSeqFree' not implemented")

        def AlpSeqControl(self, DeviceId, SequenceId, ControlType, ControlValue, current=None):
            raise NotImplementedError("servant method 'AlpSeqControl' not implemented")

        def AlpSeqTiming(self, DeviceId, SequenceId, IlluminateTime, PictureTime, SynchDelay, SynchPulseWidth, TriggerInDelay, current=None):
            raise NotImplementedError("servant method 'AlpSeqTiming' not implemented")

        def AlpSeqInquire(self, DeviceId, SequenceId, InquireType, current=None):
            raise NotImplementedError("servant method 'AlpSeqInquire' not implemented")

        def AlpSeqPut(self, DeviceId, SequenceId, PicOffset, PicLoad, UserArray, current=None):
            raise NotImplementedError("servant method 'AlpSeqPut' not implemented")

        def AlpProjStart(self, DeviceId, SequenceId, current=None):
            raise NotImplementedError("servant method 'AlpProjStart' not implemented")

        def AlpProjStartCont(self, DeviceId, SequenceId, current=None):
            raise NotImplementedError("servant method 'AlpProjStartCont' not implemented")

        def AlpProjHalt(self, DeviceId, current=None):
            raise NotImplementedError("servant method 'AlpProjHalt' not implemented")

        def AlpProjWait(self, DeviceId, current=None):
            raise NotImplementedError("servant method 'AlpProjWait' not implemented")

        def AlpProjControl(self, DeviceId, ControlType, ControlValue, current=None):
            raise NotImplementedError("servant method 'AlpProjControl' not implemented")

        def AlpProjControlEx(self, DeviceId, ControlType, UserStruct, current=None):
            raise NotImplementedError("servant method 'AlpProjControlEx' not implemented")

        def AlpProjInquire(self, DeviceId, InquireType, current=None):
            raise NotImplementedError("servant method 'AlpProjInquire' not implemented")

        def AlpProjInquireEx(self, DeviceId, InquireType, current=None):
            raise NotImplementedError("servant method 'AlpProjInquireEx' not implemented")

        def AlpLedAlloc(self, DeviceId, LedType, UserStruct, current=None):
            raise NotImplementedError("servant method 'AlpLedAlloc' not implemented")

        def AlpLedFree(self, DeviceId, LedId, current=None):
            raise NotImplementedError("servant method 'AlpLedFree' not implemented")

        def AlpLedControl(self, DeviceId, LedId, ControlType, value, current=None):
            raise NotImplementedError("servant method 'AlpLedControl' not implemented")

        def AlpLedInquire(self, DeviceId, LedId, InquireType, current=None):
            raise NotImplementedError("servant method 'AlpLedInquire' not implemented")

        def AlpLedInquireEx(self, DeviceId, LedId, InquireType, current=None):
            raise NotImplementedError("servant method 'AlpLedInquireEx' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ALPD41Network._t_ALPD41Disp)

        __repr__ = __str__

    _M_ALPD41Network._t_ALPD41Disp = IcePy.defineClass('::ALPD41Network::ALPD41', ALPD41, (), None, ())
    ALPD41._ice_type = _M_ALPD41Network._t_ALPD41Disp

    ALPD41._op_listOpenDeviceId = IcePy.Operation('listOpenDeviceId', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_ALPD41Network._t_LongArr, False, 0), ())
    ALPD41._op_freeAllDevices = IcePy.Operation('freeAllDevices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ALPD41._op_AlpDevAlloc = IcePy.Operation('AlpDevAlloc', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpDevHalt = IcePy.Operation('AlpDevHalt', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpDevFree = IcePy.Operation('AlpDevFree', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpDevControl = IcePy.Operation('AlpDevControl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpDevControlType, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpDevControlEx = IcePy.Operation('AlpDevControlEx', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpDevControlType, False, 0), ((), _M_ALPD41Network._t_AlpDynSynchOutGate, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpDevInquire = IcePy.Operation('AlpDevInquire', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpDevInquireType, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpSeqAlloc = IcePy.Operation('AlpSeqAlloc', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpSeqFree = IcePy.Operation('AlpSeqFree', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpSeqControl = IcePy.Operation('AlpSeqControl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpSeqControlType, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpSeqTiming = IcePy.Operation('AlpSeqTiming', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpSeqInquire = IcePy.Operation('AlpSeqInquire', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpSeqInquireType, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpSeqPut = IcePy.Operation('AlpSeqPut', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_ByteArr, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpProjStart = IcePy.Operation('AlpProjStart', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpProjStartCont = IcePy.Operation('AlpProjStartCont', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpProjHalt = IcePy.Operation('AlpProjHalt', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpProjWait = IcePy.Operation('AlpProjWait', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpProjControl = IcePy.Operation('AlpProjControl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpProjControlType, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpProjControlEx = IcePy.Operation('AlpProjControlEx', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpProjControlType, False, 0), ((), _M_ALPD41Network._t_FlutWrite, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpProjInquire = IcePy.Operation('AlpProjInquire', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpProjInquireType, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpProjInquireEx = IcePy.Operation('AlpProjInquireEx', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpProjInquireType, False, 0)), (), ((), _M_ALPD41Network._t_AlpProjProgress, False, 0), (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpLedAlloc = IcePy.Operation('AlpLedAlloc', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpHldPt120AllocParams, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpLedFree = IcePy.Operation('AlpLedFree', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpLedControl = IcePy.Operation('AlpLedControl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpLedControlType, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpLedInquire = IcePy.Operation('AlpLedInquire', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpLedInquireType, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_ALPD41Network._t_AlpError,))
    ALPD41._op_AlpLedInquireEx = IcePy.Operation('AlpLedInquireEx', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_ALPD41Network._t_AlpLedInquireType, False, 0)), (), ((), _M_ALPD41Network._t_AlpHldPt120AllocParams, False, 0), (_M_ALPD41Network._t_AlpError,))

    _M_ALPD41Network.ALPD41 = ALPD41
    del ALPD41

# End of module ALPD41Network
